{"version":3,"sources":["services.js","MainForm.js","App.js","serviceWorker.js","index.js"],"names":["API_KEY","loadGoogleMaps","Promise","resolve","reject","window","resolveGoogleMapsPromise","google","script","document","createElement","src","async","body","appendChild","MainForm","props","state","license","poi","radius","handlePOI","bind","handleRadius","handleLicense","handleSubmit","event","this","setState","target","value","poiTypes","googleMapsPromise","vehicleLocationsPromise","apiURL","fetch","then","resp","json","catch","console","log","loadVehicleLocations","all","values","selectedVehicleLocation","vehicleLocations","locationsLength","Object","keys","length","currentLocation","lat","lng","map","maps","Map","getElementById","zoom","scrollwheel","center","lastLocationMarker","i","markerSize","Size","markerIcon","currentLicense","currentLocationMarker","Marker","position","id","animation","Animation","DROP","icon","url","scaledSize","addListener","infoCard","infowindow","setContent","setCenter","open","panBy","getAnimation","setAnimation","BOUNCE","forEach","poiType","placesPromise","location","loadPlaces","pois","results","InfoWindow","types","indexOf","marker","geometry","name","distance","spherical","computeDistanceBetween","getPosition","Math","round","formatted_address","setTimeout","preventDefault","onSubmit","className","type","onChange","placeholder","React","Component","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5dd5cf0c.chunk.js","sourcesContent":["\r\nconst API_KEY = \"AIzaSyBob70viGuD9PCxbg5xAwqYzuGuEQZR4qo\";\r\n\r\n\r\nexport function loadGoogleMaps()\r\n{\r\n    return new Promise(function(resolve, reject){\r\n\r\n        window.resolveGoogleMapsPromise = function(){\r\n            resolve(window.google);\r\n            delete window.resolveGoogleMapsPromise;\r\n        }\r\n\r\n        const script = document.createElement(\"script\");\r\n        script.src = `https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${API_KEY}&callback=resolveGoogleMapsPromise`;\r\n        script.async = true;\r\n        document.body.appendChild(script);\r\n    })\r\n}\r\n\r\n\r\nexport function loadPlaces(poi, location, radius){\r\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n    var apiURL = 'https://maps.googleapis.com/maps/api/place/textsearch/json?query=' + poi + '&type=' + poi + '&location=' + location + '&radius=' + radius + '&key=' + API_KEY;\r\n    \r\n    return fetch(proxyurl + apiURL)\r\n    .then(resp => resp.json())\r\n    .catch(() => console.log(\"Can’t access \" + apiURL + \" response. Blocked by browser?\"))\r\n}\r\n\r\n\r\nexport function loadVehicleLocations(license){\r\n    var apiURL = \"https://man-challenge-api.herokuapp.com/vehicles/\" + license;\r\n    \r\n    return fetch(apiURL)\r\n    .then(resp => resp.json())\r\n    .catch(() => console.log(\"Can’t access \" + apiURL + \" response. Blocked by browser?\"))\r\n}","import React from 'react'\r\nimport { loadGoogleMaps, loadPlaces, loadVehicleLocations } from './services'\r\n\r\n\r\n/* \r\nReact component that generates the submission form for user interaction\r\nas well as fetching and drawing the POIs using the Google Places API and\r\nthe geo-locations of all the vehicles registered in the database from the \r\ncreated Spring Boot backend server.\r\n*/ \r\nexport class MainForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { license: '', poi: 'all', radius: '5' };\r\n\r\n        this.handlePOI = this.handlePOI.bind(this);\r\n        this.handleRadius = this.handleRadius.bind(this);\r\n        this.handleLicense = this.handleLicense.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleLicense(event) {\r\n        this.setState({ license: event.target.value });\r\n    }\r\n\r\n    handlePOI(event) {\r\n        this.setState({ poi: event.target.value });\r\n    }\r\n\r\n    handleRadius(event) {\r\n        this.setState({ radius: event.target.value });\r\n    }\r\n\r\n    //Function that handles the form submition\r\n    handleSubmit(event) {\r\n\r\n        let poiTypes = [this.state.poi];\r\n\r\n        if (this.state.poi === \"all\") {\r\n            poiTypes = [\"gas station\", \"restaurant\", \"hotel\"];\r\n        }\r\n\r\n        //Load Google Maps and get the specified vehicle's locations\r\n        let googleMapsPromise = loadGoogleMaps();\r\n        let vehicleLocationsPromise = loadVehicleLocations(this.state.license);\r\n\r\n        Promise.all([googleMapsPromise, vehicleLocationsPromise]).then(values => {\r\n\r\n            //Retrieve the google maps object and the vehicle path coordinates\r\n            let google = values[0];\r\n            let vehicleLocations = values[1];\r\n            const locationsLength = Object.keys(vehicleLocations).length;\r\n            const currentLocation = \r\n                vehicleLocations[locationsLength - 1].lat + ',' +\r\n                vehicleLocations[locationsLength - 1].lng;\r\n            let selectedVehicleLocation;\r\n            \r\n            //Draw the map centered on the vehicle's current location\r\n            this.map = new google.maps.Map(document.getElementById('map'), {\r\n                zoom: 18,\r\n                scrollwheel: true,\r\n                center: { \r\n                    lat: vehicleLocations[locationsLength - 1].lat,\r\n                    lng: vehicleLocations[locationsLength - 1].lng\r\n                }\r\n            });\r\n\r\n            //Set the vehicle's path marker's size and icon \r\n            let markerSize = new google.maps.Size(25, 25);\r\n            let vehicleFirstMarker = \"imgs/icn-first-location.png\";\r\n            let vehiclePathMarker = \"imgs/icn-path.png\";\r\n            let vehicleCurrentLocationMarker = \"imgs/icn-current-location.png\";\r\n            let markerIcon = vehicleFirstMarker;\r\n            let lastLocationMarker;\r\n            \r\n            var i;\r\n            var currentLicense = vehicleLocations[0].license;\r\n            \r\n            for (i = 0; i < locationsLength; i++) {\r\n                \r\n                //If we reached the end of the array or the next vehicle in the array\r\n                // is a different vehicle, then this is the current vehicle's current location\r\n                // otherwise we are currently drawing the current vehicle's path\r\n                if(typeof vehicleLocations[i + 1] === 'undefined' ||\r\n                    vehicleLocations[i + 1].license !== currentLicense){\r\n                    markerIcon = vehicleCurrentLocationMarker;\r\n                    markerSize = new google.maps.Size(40, 40);\r\n                }else{\r\n                    markerSize = new google.maps.Size(20, 20);\r\n                    markerIcon = vehiclePathMarker;\r\n                }\r\n\r\n                //Verify if the current vehicle's location belongs to the current vehicle\r\n                // if not, then we are now processing a different vehicle\r\n                if(vehicleLocations[i].license !== currentLicense){\r\n                    currentLicense = vehicleLocations[i].license;\r\n                    markerSize = new google.maps.Size(25, 25);\r\n                    markerIcon = vehicleFirstMarker;\r\n                }\r\n\r\n                //Drawing the vehicle's marker in the map \r\n                let currentLocationMarker = new google.maps.Marker({\r\n                    position: { lat: vehicleLocations[i].lat, lng: vehicleLocations[i].lng },\r\n                    map: this.map,\r\n                    id: vehicleLocations[i].id,\r\n                    animation: google.maps.Animation.DROP,\r\n                    icon: {\r\n                        url: markerIcon,\r\n                        scaledSize: markerSize\r\n                    },\r\n                    license: currentLicense\r\n                });\r\n\r\n                //In case of multiple vehicles in the map, by clicking on the vehicle's current marker,\r\n                //that vehicle will be selected and distances will be calculated based on it's location\r\n                //The license plate of that vehicle will also be shown to show the possiblity of creating\r\n                //a card with additional information regarding the vehicle or the driver\r\n                google.maps.event.addListener(currentLocationMarker,'click', () => {\r\n                    let infoCard = '<div class=\"info_box\"> <h3>License: ' + currentLocationMarker.license + '</h3> </div>';\r\n                    this.infowindow.setContent(infoCard);\r\n                    this.map.setCenter(currentLocationMarker.position);\r\n                    this.infowindow.open(this.map, currentLocationMarker);\r\n                    this.map.panBy(0, -125); \r\n\r\n                    //Setting an animation to give a visual reference of which vehicle is selected\r\n                    if (currentLocationMarker.getAnimation() !== null) { currentLocationMarker.setAnimation(null); }\r\n                    else { currentLocationMarker.setAnimation(google.maps.Animation.BOUNCE); }\r\n                    lastLocationMarker.setAnimation(null);\r\n\r\n                    selectedVehicleLocation = currentLocationMarker.position;\r\n                    lastLocationMarker = currentLocationMarker;\r\n                });\r\n\r\n                lastLocationMarker = currentLocationMarker;\r\n                selectedVehicleLocation = currentLocationMarker.position;\r\n            }\r\n\r\n            //Setting the animation for the current selected vehicle marker\r\n            lastLocationMarker.setAnimation(google.maps.Animation.BOUNCE); \r\n\r\n            poiTypes.forEach(poiType => {\r\n\r\n                let placesPromise = loadPlaces(poiType, currentLocation, this.state.radius);\r\n\r\n                Promise.all([placesPromise]).then(values => {\r\n\r\n                    let pois = values[0].results;\r\n                    this.google = google;\r\n                    this.infowindow = new google.maps.InfoWindow();\r\n\r\n                    pois.forEach(poi => {\r\n\r\n                        //Set the location's marker's by it's type \r\n                        markerIcon = \"imgs/icn-hotel.png\";\r\n\r\n                        if (poi.types.indexOf(\"restaurant\") > -1) \r\n                            markerIcon = \"imgs/icn-restaurant.png\";\r\n                        \r\n                        if (poi.types.indexOf(\"gas_station\") > -1) \r\n                            markerIcon = \"imgs/icn-gas-station.png\";\r\n\r\n                        //Drawing the location's marker in the map \r\n                        let marker = new google.maps.Marker({\r\n                            position: { lat: poi.geometry.location.lat, lng: poi.geometry.location.lng },\r\n                            map: this.map,\r\n                            name: poi.geometry.name,\r\n                            id: poi.geometry.id,\r\n                            animation: google.maps.Animation.DROP,\r\n                            icon: {\r\n                                url: markerIcon,\r\n                                scaledSize: new google.maps.Size(50, 50)\r\n                            }\r\n                        });\r\n\r\n                        //Setting a click listener to create a card that will display the location\r\n                        //information as well as it's distance from the current selected vehicle \r\n                        google.maps.event.addListener(marker, 'click', () => {\r\n\r\n                            //Computing the distance between the poi and the vehicle\r\n                            var distance = google.maps.geometry.spherical.computeDistanceBetween(\r\n                                marker.getPosition(), \r\n                                selectedVehicleLocation\r\n                            );\r\n\r\n                            let infoCard = '<div class=\"info_box\">' +\r\n                            '<h3>Distance: ' + Math.round(distance) + 'm</h3>' +\r\n                            '<h4>' + poi.name + '</h4>' +\r\n                            '<p>' + poi.formatted_address + '</p>' +\r\n                            '<img class=\"middlr\" alt=\"' + poi.name + '\" src=\"' + poi.icon + '\" />' +\r\n                            '</div>';\r\n\r\n                            this.infowindow.setContent(infoCard);\r\n                            this.map.setCenter(marker.position);\r\n                            this.infowindow.open(this.map, marker);\r\n                            this.map.panBy(0, -125); \r\n\r\n                            if (marker.getAnimation() !== null) { marker.setAnimation(null); }\r\n                            else { marker.setAnimation(google.maps.Animation.BOUNCE); }\r\n                            setTimeout(() => { marker.setAnimation(null) }, 1500);\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        });\r\n        event.preventDefault();\r\n    }\r\n\r\n    //Render of the form that creates the GUI\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <div className={'display-box'}>\r\n\r\n                    <div className={'component-container'}>\r\n                        <input type=\"text\" value={this.state.license} onChange={this.handleLicense} className={'component-start'} placeholder={\"Search by license plate\"} />\r\n                    </div>\r\n\r\n                    <div className={'component-container'}>\r\n                        <select value={this.state.poi} onChange={this.handlePOI} className={'component-middle'}>\r\n                            <option value=\"all\">View all</option>\r\n                            <option value=\"gas station\">Gas Stations</option>\r\n                            <option value=\"restaurant\">Restaurants</option>\r\n                            <option value=\"hotel\">Hotels</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div className={'component-container'}>\r\n                        <select value={this.state.radius} onChange={this.handleRadius} className={'component-middle'}>\r\n                            <option value=\"100\">100 m</option>\r\n                            <option value=\"200\">200 m</option>\r\n                            <option value=\"500\">500 m</option>\r\n                            <option value=\"750\">750 m</option>\r\n                            <option value=\"1000\">1 km</option>\r\n                            <option value=\"2000\">2 km</option>\r\n                            <option value=\"5000\">5 km</option>\r\n                            <option value=\"10000\">10 km</option>\r\n                            <option value=\"25000\">25 km</option>\r\n                            <option value=\"50000\">50 km</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div className={'component-container'}>\r\n                        <button type=\"submit\" className={'component-end'}>Apply</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport {MainForm} from './MainForm';\nimport {loadGoogleMaps} from './services'\n\nclass App extends Component{\n\n  componentDidMount(){\n\n    let googleMapsPromise = loadGoogleMaps();\n\n    //Rendering the Google maps for the first time at the MAN Digital Hub headquarters \n    Promise.all([googleMapsPromise]).then(values => {\n      let google = values[0];\n      this.google = google;\n      this.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 18,\n        scrollwheel: true,\n        center: {lat: 38.717121, lng: -9.149210}\n      });\n    });\n  }\n  render(){\n    return (\n      <div >\n        <MainForm></MainForm>\n        <div id=\"map\" ></div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}